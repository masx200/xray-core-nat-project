// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: config.proto

package nat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Site identifier for this NAT gateway
	SiteId string `protobuf:"bytes,1,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// User level for policy management
	UserLevel uint32 `protobuf:"varint,2,opt,name=user_level,json=userLevel,proto3" json:"user_level,omitempty"`
	// Protocol enablement
	EnableTcp bool `protobuf:"varint,3,opt,name=enable_tcp,json=enableTcp,proto3" json:"enable_tcp,omitempty"`
	EnableUdp bool `protobuf:"varint,4,opt,name=enable_udp,json=enableUdp,proto3" json:"enable_udp,omitempty"`
	// Virtual IP ranges managed by this gateway
	VirtualRanges []*VirtualIPRange `protobuf:"bytes,5,rep,name=virtual_ranges,json=virtualRanges,proto3" json:"virtual_ranges,omitempty"`
	// Translation rules for destination networks
	Rules []*NATRule `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	// Session timeout configuration
	SessionTimeout *SessionTimeout `protobuf:"bytes,7,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	// Performance and memory limits
	Limits        *ResourceLimits `protobuf:"bytes,8,opt,name=limits,proto3" json:"limits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *Config) GetUserLevel() uint32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *Config) GetEnableTcp() bool {
	if x != nil {
		return x.EnableTcp
	}
	return false
}

func (x *Config) GetEnableUdp() bool {
	if x != nil {
		return x.EnableUdp
	}
	return false
}

func (x *Config) GetVirtualRanges() []*VirtualIPRange {
	if x != nil {
		return x.VirtualRanges
	}
	return nil
}

func (x *Config) GetRules() []*NATRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Config) GetSessionTimeout() *SessionTimeout {
	if x != nil {
		return x.SessionTimeout
	}
	return nil
}

func (x *Config) GetLimits() *ResourceLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

type VirtualIPRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Virtual IP range (e.g., "240.2.2.0/24")
	VirtualNetwork string `protobuf:"bytes,1,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty"`
	// Corresponding real network (e.g., "192.168.1.0/24")
	RealNetwork string `protobuf:"bytes,2,opt,name=real_network,json=realNetwork,proto3" json:"real_network,omitempty"`
	// IPv6 support
	Ipv6Enabled bool `protobuf:"varint,3,opt,name=ipv6_enabled,json=ipv6Enabled,proto3" json:"ipv6_enabled,omitempty"`
	// IPv6 virtual prefix
	Ipv6VirtualPrefix string `protobuf:"bytes,4,opt,name=ipv6_virtual_prefix,json=ipv6VirtualPrefix,proto3" json:"ipv6_virtual_prefix,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VirtualIPRange) Reset() {
	*x = VirtualIPRange{}
	mi := &file_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualIPRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualIPRange) ProtoMessage() {}

func (x *VirtualIPRange) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualIPRange.ProtoReflect.Descriptor instead.
func (*VirtualIPRange) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *VirtualIPRange) GetVirtualNetwork() string {
	if x != nil {
		return x.VirtualNetwork
	}
	return ""
}

func (x *VirtualIPRange) GetRealNetwork() string {
	if x != nil {
		return x.RealNetwork
	}
	return ""
}

func (x *VirtualIPRange) GetIpv6Enabled() bool {
	if x != nil {
		return x.Ipv6Enabled
	}
	return false
}

func (x *VirtualIPRange) GetIpv6VirtualPrefix() string {
	if x != nil {
		return x.Ipv6VirtualPrefix
	}
	return ""
}

type NATRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Rule identifier
	RuleId string `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// Source site filter (optional)
	SourceSite string `protobuf:"bytes,2,opt,name=source_site,json=sourceSite,proto3" json:"source_site,omitempty"`
	// Virtual IP destination to match
	VirtualDestination string `protobuf:"bytes,3,opt,name=virtual_destination,json=virtualDestination,proto3" json:"virtual_destination,omitempty"`
	// Real destination to translate to
	RealDestination string `protobuf:"bytes,4,opt,name=real_destination,json=realDestination,proto3" json:"real_destination,omitempty"`
	// Protocol filtering (tcp, udp, or both)
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Port mapping (optional)
	PortMapping   *PortMapping `protobuf:"bytes,6,opt,name=port_mapping,json=portMapping,proto3" json:"port_mapping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NATRule) Reset() {
	*x = NATRule{}
	mi := &file_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NATRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATRule) ProtoMessage() {}

func (x *NATRule) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATRule.ProtoReflect.Descriptor instead.
func (*NATRule) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *NATRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *NATRule) GetSourceSite() string {
	if x != nil {
		return x.SourceSite
	}
	return ""
}

func (x *NATRule) GetVirtualDestination() string {
	if x != nil {
		return x.VirtualDestination
	}
	return ""
}

func (x *NATRule) GetRealDestination() string {
	if x != nil {
		return x.RealDestination
	}
	return ""
}

func (x *NATRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *NATRule) GetPortMapping() *PortMapping {
	if x != nil {
		return x.PortMapping
	}
	return nil
}

type PortMapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Original port or range
	OriginalPort string `protobuf:"bytes,1,opt,name=original_port,json=originalPort,proto3" json:"original_port,omitempty"`
	// Translated port or range
	TranslatedPort string `protobuf:"bytes,2,opt,name=translated_port,json=translatedPort,proto3" json:"translated_port,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PortMapping) Reset() {
	*x = PortMapping{}
	mi := &file_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMapping) ProtoMessage() {}

func (x *PortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMapping.ProtoReflect.Descriptor instead.
func (*PortMapping) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *PortMapping) GetOriginalPort() string {
	if x != nil {
		return x.OriginalPort
	}
	return ""
}

func (x *PortMapping) GetTranslatedPort() string {
	if x != nil {
		return x.TranslatedPort
	}
	return ""
}

type SessionTimeout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TCP connection timeout in seconds
	TcpTimeout uint32 `protobuf:"varint,1,opt,name=tcp_timeout,json=tcpTimeout,proto3" json:"tcp_timeout,omitempty"`
	// UDP session timeout in seconds
	UdpTimeout uint32 `protobuf:"varint,2,opt,name=udp_timeout,json=udpTimeout,proto3" json:"udp_timeout,omitempty"`
	// Idle session cleanup interval in seconds
	CleanupInterval uint32 `protobuf:"varint,3,opt,name=cleanup_interval,json=cleanupInterval,proto3" json:"cleanup_interval,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SessionTimeout) Reset() {
	*x = SessionTimeout{}
	mi := &file_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTimeout) ProtoMessage() {}

func (x *SessionTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTimeout.ProtoReflect.Descriptor instead.
func (*SessionTimeout) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *SessionTimeout) GetTcpTimeout() uint32 {
	if x != nil {
		return x.TcpTimeout
	}
	return 0
}

func (x *SessionTimeout) GetUdpTimeout() uint32 {
	if x != nil {
		return x.UdpTimeout
	}
	return 0
}

func (x *SessionTimeout) GetCleanupInterval() uint32 {
	if x != nil {
		return x.CleanupInterval
	}
	return 0
}

type ResourceLimits struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum concurrent sessions
	MaxSessions uint32 `protobuf:"varint,1,opt,name=max_sessions,json=maxSessions,proto3" json:"max_sessions,omitempty"`
	// Maximum memory usage in MB
	MaxMemoryMb uint32 `protobuf:"varint,2,opt,name=max_memory_mb,json=maxMemoryMb,proto3" json:"max_memory_mb,omitempty"`
	// Session table cleanup threshold
	CleanupThreshold float32 `protobuf:"fixed32,3,opt,name=cleanup_threshold,json=cleanupThreshold,proto3" json:"cleanup_threshold,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceLimits) Reset() {
	*x = ResourceLimits{}
	mi := &file_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimits) ProtoMessage() {}

func (x *ResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimits.ProtoReflect.Descriptor instead.
func (*ResourceLimits) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceLimits) GetMaxSessions() uint32 {
	if x != nil {
		return x.MaxSessions
	}
	return 0
}

func (x *ResourceLimits) GetMaxMemoryMb() uint32 {
	if x != nil {
		return x.MaxMemoryMb
	}
	return 0
}

func (x *ResourceLimits) GetCleanupThreshold() float32 {
	if x != nil {
		return x.CleanupThreshold
	}
	return 0
}

var File_config_proto protoreflect.FileDescriptor

const file_config_proto_rawDesc = "" +
	"\n" +
	"\fconfig.proto\x12\x0exray.proxy.nat\"\xf5\x02\n" +
	"\x06Config\x12\x17\n" +
	"\asite_id\x18\x01 \x01(\tR\x06siteId\x12\x1d\n" +
	"\n" +
	"user_level\x18\x02 \x01(\rR\tuserLevel\x12\x1d\n" +
	"\n" +
	"enable_tcp\x18\x03 \x01(\bR\tenableTcp\x12\x1d\n" +
	"\n" +
	"enable_udp\x18\x04 \x01(\bR\tenableUdp\x12E\n" +
	"\x0evirtual_ranges\x18\x05 \x03(\v2\x1e.xray.proxy.nat.VirtualIPRangeR\rvirtualRanges\x12-\n" +
	"\x05rules\x18\x06 \x03(\v2\x17.xray.proxy.nat.NATRuleR\x05rules\x12G\n" +
	"\x0fsession_timeout\x18\a \x01(\v2\x1e.xray.proxy.nat.SessionTimeoutR\x0esessionTimeout\x126\n" +
	"\x06limits\x18\b \x01(\v2\x1e.xray.proxy.nat.ResourceLimitsR\x06limits\"\xaf\x01\n" +
	"\x0eVirtualIPRange\x12'\n" +
	"\x0fvirtual_network\x18\x01 \x01(\tR\x0evirtualNetwork\x12!\n" +
	"\freal_network\x18\x02 \x01(\tR\vrealNetwork\x12!\n" +
	"\fipv6_enabled\x18\x03 \x01(\bR\vipv6Enabled\x12.\n" +
	"\x13ipv6_virtual_prefix\x18\x04 \x01(\tR\x11ipv6VirtualPrefix\"\xfb\x01\n" +
	"\aNATRule\x12\x17\n" +
	"\arule_id\x18\x01 \x01(\tR\x06ruleId\x12\x1f\n" +
	"\vsource_site\x18\x02 \x01(\tR\n" +
	"sourceSite\x12/\n" +
	"\x13virtual_destination\x18\x03 \x01(\tR\x12virtualDestination\x12)\n" +
	"\x10real_destination\x18\x04 \x01(\tR\x0frealDestination\x12\x1a\n" +
	"\bprotocol\x18\x05 \x01(\tR\bprotocol\x12>\n" +
	"\fport_mapping\x18\x06 \x01(\v2\x1b.xray.proxy.nat.PortMappingR\vportMapping\"[\n" +
	"\vPortMapping\x12#\n" +
	"\roriginal_port\x18\x01 \x01(\tR\foriginalPort\x12'\n" +
	"\x0ftranslated_port\x18\x02 \x01(\tR\x0etranslatedPort\"}\n" +
	"\x0eSessionTimeout\x12\x1f\n" +
	"\vtcp_timeout\x18\x01 \x01(\rR\n" +
	"tcpTimeout\x12\x1f\n" +
	"\vudp_timeout\x18\x02 \x01(\rR\n" +
	"udpTimeout\x12)\n" +
	"\x10cleanup_interval\x18\x03 \x01(\rR\x0fcleanupInterval\"\x84\x01\n" +
	"\x0eResourceLimits\x12!\n" +
	"\fmax_sessions\x18\x01 \x01(\rR\vmaxSessions\x12\"\n" +
	"\rmax_memory_mb\x18\x02 \x01(\rR\vmaxMemoryMb\x12+\n" +
	"\x11cleanup_threshold\x18\x03 \x01(\x02R\x10cleanupThresholdB%Z#github.com/xtls/xray-core/proxy/natb\x06proto3"

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData []byte
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)))
	})
	return file_config_proto_rawDescData
}

var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_config_proto_goTypes = []any{
	(*Config)(nil),         // 0: xray.proxy.nat.Config
	(*VirtualIPRange)(nil), // 1: xray.proxy.nat.VirtualIPRange
	(*NATRule)(nil),        // 2: xray.proxy.nat.NATRule
	(*PortMapping)(nil),    // 3: xray.proxy.nat.PortMapping
	(*SessionTimeout)(nil), // 4: xray.proxy.nat.SessionTimeout
	(*ResourceLimits)(nil), // 5: xray.proxy.nat.ResourceLimits
}
var file_config_proto_depIdxs = []int32{
	1, // 0: xray.proxy.nat.Config.virtual_ranges:type_name -> xray.proxy.nat.VirtualIPRange
	2, // 1: xray.proxy.nat.Config.rules:type_name -> xray.proxy.nat.NATRule
	4, // 2: xray.proxy.nat.Config.session_timeout:type_name -> xray.proxy.nat.SessionTimeout
	5, // 3: xray.proxy.nat.Config.limits:type_name -> xray.proxy.nat.ResourceLimits
	3, // 4: xray.proxy.nat.NATRule.port_mapping:type_name -> xray.proxy.nat.PortMapping
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
